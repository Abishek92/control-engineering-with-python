% Controllers
% Sébastien Boisgérault, Mines ParisTech

Preamble
================================================================================

--------------------------------------------------------------------------------

::: slides :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    from numpy import *
    from numpy.linalg import *
    from numpy.testing import *
    from matplotlib.pyplot import *
    from scipy.integrate import *

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

::: notebook :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    from numpy import *
    import matplotlib; matplotlib.use("nbAgg")
    from matplotlib.pyplot import *
    %matplotlib notebook 

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    # Python 3.x Standard Library
    import gc
    import os

    # Third-Party Packages
    import numpy as np; np.seterr(all="ignore")
    import numpy.linalg as la
    import scipy.misc
    import matplotlib as mpl; mpl.use("Agg")
    import matplotlib.pyplot as pp
    import matplotlib.axes as ax
    import matplotlib.patches as pa


    #
    # Matplotlib Configuration & Helper Functions
    # --------------------------------------------------------------------------
    
    # TODO: also reconsider line width and markersize stuff "for the web
    #       settings".
    fontsize = 35

    rc = {
        "text.usetex": True,
        "pgf.preamble": [r"\usepackage{amsmath,amsfonts,amssymb}"], 
        #"font.family": "serif",
        "font.serif": [],
        #"font.sans-serif": [],
        "legend.fontsize": fontsize, 
        "axes.titlesize":  fontsize,
        "axes.labelsize":  fontsize,
        "xtick.labelsize": fontsize,
        "ytick.labelsize": fontsize,
        #"savefig.dpi": 300,
        #"figure.dpi": 300,
    }
    mpl.rcParams.update(rc)

    # Web target: 160 / 9 inches (that's ~45 cm, this is huge) at 90 dpi 
    # (the "standard" dpi for Web computations) gives 1600 px.
    width_in = 160 / 9 

    def save(name):
        cwd = os.getcwd()
        root = os.path.dirname(os.path.realpath(__file__))
        os.chdir(root)
        pp.savefig(name + ".svg")
        os.chdir(cwd)

    def set_ratio(ratio=1.0, bottom=0.1, top=0.1, left=0.1, right=0.1):
        height_in = (1.0 - left - right)/(1.0 - bottom - top) * width_in / ratio
        pp.gcf().set_size_inches((width_in, height_in))
        pp.gcf().subplots_adjust(bottom=bottom, top=1.0-top, left=left, right=1.0-right)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Commandability
================================================================================

Definition
--------------------------------------------------------------------------------

The system $\dot{x} = f(x,u)$ is **commandable** if 

  - for any $t_0 \in \mathbb{R}$, $x_0 \in \mathbb{R}^n$ and $x_f \in \mathbb{R}^n$, 

  - there are $t_f > 0$ and $u: [t_0, t_f] \to \mathbb{R}^m$ such that

  - the solution $x(t)$ such that $x(t_0)=x_0$ satisfies

    $$
    x(t_f) = x_f.
    $$


--------------------------------------------------------------------------------

<i class="fa fa-question-circle-o"></i> Car
--------------------------------------------------------------------------------

The location $x$ (in meters) of a car of mass $m$, 
initially at the origin of a road and motionless
is governed by

$$
m \ddot{x} = u
$$

where $u$ the force (in Newtons) generated by its motor.

  - A what condition is there a constant force $u$ that can lead the vehicle
    to the location $x_f$ at speed $v_f$ in $t_f$ seconds ?

--------------------------------------------------------------------------------

  - Show that in general this problem can be solved for a suitable
    time-dependent choice of $u$.

    <i class="fa fa-key"></i> **Hint:** search for the appropriate $u$
    as an affine function of $t$.

  - Display this trajectory $x(t)$ when $m=1500 \, \mbox{kg}$, 
    when $t_f=5 \, \mbox{s}$, $x_f=100 \, \mbox{m}$ and 
    $v_f=100 \, \mbox{km/h}$.

--------------------------------------------------------------------------------

    m = 1500.0
    xf = 100.0
    vf = 100.0 * 1000 / 3600
    tf = 10.0
    a = vf/tf**2 - 2*xf/tf**3
    b = 3*xf/tf**2 - vf/tf

--------------------------------------------------------------------------------

    def x(t):
        return a * t**3 + b * t**2
    def d2_x(t):
        return 6 * a * t + 2 * b
    def u(t):
        return m * d2_x(t)

--------------------------------------------------------------------------------

    y0 = [0.0, 0.0]
    def fun(t, y):
        x, d_x = y
        d2_x = u(t) / m
        return [d_x, d2_x]
    result = solve_ivp(fun, [0.0, tf], y0, dense_output=True)


--------------------------------------------------------------------------------

    figure()
    t = linspace(0, tf, 1000)
    plot(t, result["sol"](t)[0])
    grid(True); xlabel("$t$"); title("$x(t)$")

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/car")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


--------------------------------------------------------------------------------

![](images/car.svg)

--------------------------------------------------------------------------------

    figure()
    plot(t, 3.6 * result["sol"](t)[1])
    grid(True); xlabel("$t$")
    title("$\dot{x}(t) \, \mbox{[km/h]}$")

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/car-speed")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


--------------------------------------------------------------------------------

![](images/car-speed.svg)

<i class="fa fa-eye"></i> Pendulum
--------------------------------------------------------------------------------

  $$
  m \ell^2 \ddot{\theta} + b \dot{\theta} + mg \ell \sin \theta = u
  $$

--------------------------------------------------------------------------------

    tf = 10.0
    def theta(t):
        return -2*pi*(t/tf)**3 + 3*pi*(t/tf)**2
    figure()
    t = linspace(0.0, tf, 1000)
    grid(True); xlabel("$t$"); title(r"$\theta(t)$")
    plot(t, theta(t))


::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/pendulum-theta")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

--------------------------------------------------------------------------------

![](images/pendulum-theta.svg)

--------------------------------------------------------------------------------

    def d_theta(t):
        return -6*pi*t**2/tf**3 + 6*pi*t/tf**2
    def d2_theta(t):
        return -12*pi*t/tf**3 + 6*pi/tf**2


--------------------------------------------------------------------------------

    figure()
    t = linspace(0.0, tf, 1000)
    grid(True); xlabel("$t$"); title(r"$\dot{\theta}(t)$")
    plot(t, d_theta(t))


::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/pendulum-d_theta")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

--------------------------------------------------------------------------------

![](images/pendulum-d_theta.svg)

--------------------------------------------------------------------------------

    figure()
    t = linspace(0.0, tf, 1000)
    grid(True); xlabel("$t$"); title(r"$\ddot{\theta}(t)$")
    plot(t, d2_theta(t))

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/pendulum-d2_theta")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

--------------------------------------------------------------------------------

![](images/pendulum-d2_theta.svg)

--------------------------------------------------------------------------------

    m = 1.0; l = 1.0; b = 0.1; g = 9.81
    def u(t):
        return (m * l**2 * d2_theta(t) + \
               b * d_theta(t) + \
               m * g * l * sin(theta(t))) * (t <= tf)

--------------------------------------------------------------------------------

    figure()
    t = linspace(0.0, 2 * tf, 1000)
    grid(True); xlabel("$t$"); title("$u(t)$")
    plot(t, u(t))


::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/pendulum-u")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


--------------------------------------------------------------------------------

![](images/pendulum-u.svg)

--------------------------------------------------------------------------------

    def fun(t, y):
        theta, d_theta = y
        J = m * l**2
        d2_theta = - g / l * sin(theta) \
                   - b / J * d_theta \
                   + u(t) / J
        return [d_theta, d2_theta]

--------------------------------------------------------------------------------

    y0 = [0.0, 0.0]
    t_span = [0.0, 2*tf]
    result = solve_ivp(fun, t_span, y0, dense_output=True, max_step=0.1)

--------------------------------------------------------------------------------

    figure()
    t = linspace(0.0, tf, 1000)
    plot(t, theta(t), "k--")
    t = linspace(0.0, 2*tf, 1000)
    plot(t, result["sol"](t)[0], "k")
    #plot(result["t"], result["y"][0], "k+")
    grid(True); xlabel("$t$"); title(r"$\theta(t)$")

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/pendulum-sol")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


--------------------------------------------------------------------------------

![](images/pendulum-sol.svg)

Commandability / LTI system
--------------------------------------------------------------------------------

For a LTI system, it is sufficient to check that

  - from the origin $x_0 = 0$ at $t_0=0$,

  - we can reach any state $x_f \in \mathbb{R}^n$.

Kalman Criterion
--------------------------------------------------------------------------------

The system $\dot{x} = Ax+Bu$ is commandable iff:

  $$
  \mathrm{rank} \, \left[B, AB, \dots, A^{n-1} B\right] = n
  $$

$[B, \dots, A^{n-1}B]$ is the **Kalman controllability matrix**.

--------------------------------------------------------------------------------

### Exercise

Show that the commandability has nothing to do with the size of the state vs
the number of inputs. The nice example here is the chain of integrators of
course ...

<i class="fa fa-question-circle-o"></i> Integrator Chain
--------------------------------------------------------------------------------

![](images/static/integrator-chain.svg)

--------------------------------------------------------------------------------

### Exercise

Heat in rooms: where to put the heater(s)/cooler(s) ?

--------------------------------------------------------------------------------

### Exercise:

Change of variable when commandability matrix is full rank

--------------------------------------------------------------------------------

### Exercise

Interpret rank default in the commandability matrix as a space that
can't be reach (make the computations)


Asymptotic Stabilization
================================================================================

Stabilization
--------------------------------------------------------------------------------
When the system 

$$
\dot{x} = A x, \; x \in \mathbb{R}^n
$$ 

is not asymptotically stable,

maybe there are some inputs $u \in \mathbb{R}^m$ such that

$$
\dot{x} = A x + Bu
$$

that we can use to stabilize asymptotically the system?


Linear Feedback
--------------------------------------------------------------------------------

We can try to compute $u$ as 

$$
u = -K x
$$ 

fro some $K \in \mathbb{R}^{m \times n}$


Closed-Loop Diagram
--------------------------------------------------------------------------------

![](images/static/feedback.svg)

Closed-Loop Dynamics
--------------------------------------------------------------------------------

When

  $$
  \begin{array}[ccc]
  \dot{x} = Ax + B u \\
  u = - K x
  \end{array}
  $$

the state $x \in \mathbb{R}^n$ evolves according to:

  $$
  \dot{x} = (A - B K) x
  $$


--------------------------------------------------------------------------------

The closed-loop system is asymptotically stable iff every eigenvalue of the
matrix

$$
A - B K
$$

is in the open left-hand plane.


Pole Assignment
--------------------------------------------------------------------------------

  - Assume that $\dot{x} = A x + Bu$ is commandable.

  - Let $\Lambda = \{\lambda_1, \dots, \lambda_n\} \in \mathbb{C}^n$.

Then there is a matrix $K$ such that the set of eigenvalues of $A - B K$ is
$\Lambda$.

**TODO:** mention what's going on if $\Lambda$ is not symmetric wrt the
horizontal axis.

<i class="fa fa-eye"></i> Stabilization/Pole Assignment
--------------------------------------------------------------------------------

Consider the double integrator $\ddot{x} = u$ 

  $$
  \frac{d}{dt}
  \left[\begin{array}{c} x \\ \dot{x} \end{array}\right]
  =
  \left[\begin{array}{cx} 0 & 1 \\ 0 & 0\end{array}\right]
  \left[\begin{array}{c} x \\ \dot{x} \end{array}\right]
  +
  \left[\begin{array}{c} 0 \\ 1 \end{array}\right]
  u
  $$

(in standard form)

--------------------------------------------------------------------------------

    from scipy.signal import place_poles
    A = array([[0, 1], [0, 0]])
    B = array([[0], [1]])
    poles = [-1, -2]
    K = place_poles(A, B, poles).gain_matrix

--------------------------------------------------------------------------------

    assert_almost_equal(K, [[2.0, 3.0]])
    eigenvalues, _ = eig(A - B @ K)
    assert_almost_equal(eigenvalues, [-1, -2])

<i class="fa fa-area-chart"></i>
--------------------------------------------------------------------------------

    figure()
    x = [real(s) for s in eigenvalues]
    y = [imag(s) for s in eigenvalues]
    plot(x, y, "kx", ms=12.0)
    xticks([-3, -2,-1, 0,1, 2,3])
    yticks([-3, -2,-1, 0,1, 2,3])
    plot([0, 0], [-3, 3], "k")
    plot([-3, 3], [0, 0], "k")   
    title("Eigenvalues")
    grid(True)

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    axis("square")
    axis([-3, 3, -3, 3])

    #tight_layout()
    save("images/poles-PA")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


--------------------------------------------------------------------------------

![](images/poles-PA.svg)

--------------------------------------------------------------------------------

### Exercise

Show on a simple example (block-diagram) how some poles can't be moved if
the system is not controllable.

--------------------------------------------------------------------------------

**TODO:** redo the pendulum, see how that's better than the open-loop.




Optimal Control
--------------------------------------------------------------------------------

Let 

$$\dot{x} = A x + Bu$$

where 

  - $A \in \mathbb{R}^{n\times n}$, $B \in \mathbb{R}^{m\times n}$ and

  - $x(0) = x_0 \in \mathbb{R}^n$ is given.

--------------------------------------------------------------------------------

Find $u(t)$ that minimizes

  $$ 
  J = \int_0^{+\infty} x(t)^t Q x(t) + u(t)^t R u(t) \, dt
  $$

where:

  - $Q \in \mathbb{R}^{n \times n}$ and $R \in \mathbb{R}^{m\times m}$,

  - (to be continued ...)

--------------------------------------------------------------------------------

  - $Q$ and $R$ are **symmetric** ($R^t = R$ and $Q^t = Q$),

  - $Q$ and $R$ are **positive semidefinite** (denoted "$>0$")

    $$x^t Q x \geq 0 \, \mbox{ and } \, x^t Q x = 0 \, \mbox{ iff }\, x=0$$

    and
    
    $$u^t R u \geq 0 \, \mbox{ and } \, u^t R u = 0 \, \mbox{ iff }\, u=0.$$

Optimal Solution
--------------------------------------------------------------------------------

Assume that $\dot{x} = A x + Bu$ is commandable.

There is an optimal solution; it is a linear feedback

$$u = - K x$$

The corresponding closed-loop dynamics is asymptotically stable.

Algebraic Riccati Equation
--------------------------------------------------------------------------------

The gain matrix $K$ is given by

  $$
  K = R^{-1} B^t \Pi,
  $$
  
 where $\Pi \in \mathbb{R}^{n \times n}$ is the unique matrix such that
 $\Pi^t = \Pi$, $\Pi > 0$ and

   $$
   \Pi B R^{-1} B^t \Pi - \Pi A - A^t \Pi - Q = 0.
   $$

<i class="fa fa-eye"></i> Stabilization/Pole Assignment
--------------------------------------------------------------------------------

Consider the double integrator $\ddot{x} = u$ 

  $$
  \frac{d}{dt}
  \left[\begin{array}{c} x \\ \dot{x} \end{array}\right]
  =
  \left[\begin{array}{cx} 0 & 1 \\ 0 & 0\end{array}\right]
  \left[\begin{array}{c} x \\ \dot{x} \end{array}\right]
  +
  \left[\begin{array}{c} 0 \\ 1 \end{array}\right]
  u
  $$

(in standard form)

--------------------------------------------------------------------------------

    from scipy.linalg import solve_continuous_are
    A = array([[0, 1], [0, 0]])
    B = array([[0], [1]])
    Q = array([[1, 0], [0, 1]]); R = array([[1]])
    Pi = solve_continuous_are(A, B, Q, R)
    K = inv(R) @ B.T @ Pi
    eigenvalues, _ = eig(A - B @ K)
    assert all([real(s) < 0 for s in eigenvalues])

<i class="fa fa-area-chart"></i>
--------------------------------------------------------------------------------

    figure()
    x = [real(s) for s in eigenvalues]
    y = [imag(s) for s in eigenvalues]
    plot(x, y, "kx", ms=12.0)
    xticks([-2, -1, 0, 1, 2])
    yticks([-2, -1, 0, 1, 2])
    plot([0, 0], [-2, 2], "k")
    plot([-2, 2], [0, 0], "k")   
    grid(True)
    title("Eigenvalues")

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    axis("square")
    axis([-2, 2, -2, 2])
    save("images/poles-LQ")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

--------------------------------------------------------------------------------

![](images/poles-LQ.svg)

--------------------------------------------------------------------------------

<i class="fa fa-question-circle-o"></i> Optimal Control / Asymmetry
--------------------------------------------------------------------------------

 - [<i class='fa fa-gears'></i>] What can be done if $Q$ and/or $R$ is not symmetric?



<style>

.reveal section img {
  border:0;
  height:50vh;
  width:auto;

}

.reveal section img.medium {
  border:0;
  max-width:50vh;
}

.reveal section img.icon {
  display:inline;
  border:0;
  width:1em;
  margin:0em;
  box-shadow:none;
  vertical-align:-10%;
}

.reveal code {
  font-family: Inconsolata, monospace;
}

.reveal pre code {
  font-size: 1.5em;
  line-height: 1.5em;
  /* max-height: 80wh; won't work, overriden */
}

input {
  font-family: "Source Sans Pro", Helvetica, sans-serif;
  font-size: 42px;
  line-height: 54.6px;
}

</style>

<link href="https://fonts.googleapis.com/css?family=Inconsolata:400,700" rel="stylesheet"> 

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css" rel="stylesheet">
