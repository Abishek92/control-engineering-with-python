% Linear Systems


::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    # Python 3.x Standard Library
    import gc
    import os

    # Third-Party Packages
    from numpy import *
    from matplotlib.pyplot import *
    from mpl_toolkits.mplot3d import *
    from scipy.linalg import *


    import numpy as np; np.seterr(all="ignore")
    import numpy.linalg as la
    import scipy.misc
    import matplotlib as mpl; mpl.use("Agg")
    import matplotlib.pyplot as pp
    import matplotlib.axes as ax
    import matplotlib.patches as pa


    #
    # Matplotlib Configuration & Helper Functions
    # --------------------------------------------------------------------------
    
    # TODO: also reconsider line width and markersize stuff "for the web
    #       settings".
    fontsize = 35

    rc = {
        "text.usetex": True,
        "pgf.preamble": [r"\usepackage{amsmath,amsfonts,amssymb}"], 
        #"font.family": "serif",
        "font.serif": [],
        #"font.sans-serif": [],
        "legend.fontsize": fontsize, 
        "axes.titlesize":  fontsize,
        "axes.labelsize":  fontsize,
        "xtick.labelsize": fontsize,
        "ytick.labelsize": fontsize,
        #"savefig.dpi": 300,
        #"figure.dpi": 300,
    }
    mpl.rcParams.update(rc)

    # Web target: 160 / 9 inches (that's ~45 cm, this is huge) at 90 dpi 
    # (the "standard" dpi for Web computations) gives 1600 px.
    width_in = 160 / 9 

    def save(name):
        cwd = os.getcwd()
        root = os.path.dirname(os.path.realpath(__file__))
        os.chdir(root)
        pp.savefig(name + ".svg")
        os.chdir(cwd)

    def set_ratio(ratio=1.0, bottom=0.1, top=0.1, left=0.1, right=0.1):
        height_in = (1.0 - left - right)/(1.0 - bottom - top) * width_in / ratio
        pp.gcf().set_size_inches((width_in, height_in))
        pp.gcf().subplots_adjust(bottom=bottom, top=1.0-top, left=left, right=1.0-right)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



Misc.
================================================================================

Nonlinear to Linear: Done Before/Reminder
--------------------------------------------------------------------------------

Steps: (approx): equilibrium, error variables, etc.

Here or in the previous slides ?

Explain LTI concept, with emphasis on LTI ?


Standard Form
--------------------------------------------------------------------------------

(explain Finite-Dim Hyp ?)

  $$
  \begin{array}{c}
  \dot{x} &=& A x + B u \\
  y       &=& C x + D u
  \end{array}
  $$

TODO: check well-posedness.

--------------------------------------------------------------------------------

$x \in \mathbb{R}^n,$ $u \in \mathbb{R}^m$, $y \in \mathbb{R}^p$.

$A \in \mathbb{R}^{n\times n}$, etc.



--------------------------------------------------------------------------------

Several "interpretations" of the system, where do we talk about this:

  - "general case" classic IVP, $t \geq 0$, initial condition

But the study can be split in two "extreme" modes (proof !):

  - autonomous mode / internal dynamics: 
    influence of $x_0$ only, without $u$ or $y$.
    We can always pick $t_0 = 0$.

  - $x_0 = 0$, input-to-state or input-to-output behavior.
    Optionnaly, $t_0$ rejected to $-\infty$ (necessary ?).


Stability
--------------------------------------------------------------------------------

Stability concepts simplify/"collapse" for LTI systems:

  - A system is locally A.S. iff it is globally A.S.

**TODO:** explain in two drawings here why.

Therefore we just say "asymptotically stable"

  - The origin is attractive iff it is asymptotically stable.


(Q: A.S. qualifier applied to the equilibrium point or system ?)


Explicit Solution
--------------------------------------------------------------------------------

Internal Dynamics:

  $$
  x(t) = e^{At} x_0
  $$

(need some details here on exponential, corresponding code with
`expm`, etc.).


Solver
--------------------------------------------------------------------------------

    @vectorize
    def x(t):
        global A, x0
        A_ = array(A)
        return expm(A_*t) @ x0




--------------------------------------------------------------------------------

External Dynamics: (variation of the constant):

  $$
  y(t) = C \int_0^t e^{A(t-s)}B u(s) \, ds + D u(t) 
  $$


Internal Stability
================================================================================




Scalar Case
--------------------------------------------------------------------------------


  $$
  \dot{x} = a x
  $$

$a \in \mathbb{R}$, $x(0) = x_0 \in \mathbb{R}$.

--------------------------------------------------------------------------------
    
    a = 2.0

    A = [[a]]; x0 = [1.0]
    figure()
    t = linspace(0.0, 3.0, 1000)
    plot(t, x(t), "k")
    xlabel("$t$"); ylabel("$x(t)$"); title(f"$a={a}$")
    grid(); axis([0.0, 2.0, 0.0, 10.0])

--------------------------------------------------------------------------------

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/scalar-LTI-2")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

![](images/scalar-LTI-2.svg)

--------------------------------------------------------------------------------
    
    a = 1.0

    A = [[a]]; x0 = [1.0]
    figure()
    t = linspace(0.0, 3.0, 1000)
    plot(t, x(t), "k")
    xlabel("$t$"); ylabel("$x(t)$"); title(f"$a={a}$")
    grid(); axis([0.0, 2.0, 0.0, 10.0])

--------------------------------------------------------------------------------

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/scalar-LTI-1")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

![](images/scalar-LTI-1.svg)

--------------------------------------------------------------------------------
    
    a = 0.0

    A = [[a]]; x0 = [1.0]
    figure()
    t = linspace(0.0, 3.0, 1000)
    plot(t, x(t), "k")
    xlabel("$t$"); ylabel("$x(t)$"); title(f"$a={a}$")
    grid(); axis([0.0, 2.0, 0.0, 10.0])

--------------------------------------------------------------------------------

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/scalar-LTI-0")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

![](images/scalar-LTI-0.svg)

--------------------------------------------------------------------------------
    
    a = -1.0

    A = [[a]]; x0 = [1.0]
    figure()
    t = linspace(0.0, 3.0, 1000)
    plot(t, x(t), "k")
    xlabel("$t$"); ylabel("$x(t)$"); title(f"$a={a}$")
    grid(); axis([0.0, 2.0, 0.0, 10.0])

--------------------------------------------------------------------------------

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/scalar-LTI-m1")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

![](images/scalar-LTI-m1.svg)

--------------------------------------------------------------------------------
    
    a = -2.0

    A = [[a]]; x0 = [1.0]
    figure()
    t = linspace(0.0, 3.0, 1000)
    plot(t, x(t), "k")
    xlabel("$t$"); ylabel("$x(t)$"); title(f"$a={a}$")
    grid(); axis([0.0, 2.0, 0.0, 10.0])

--------------------------------------------------------------------------------

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/scalar-LTI-m2")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

![](images/scalar-LTI-m2.svg)


--------------------------------------------------------------------------------

    figure()
    t = linspace(0.0, 20.0, 1000)
    A = array([[1.0j]]); x0 = [1.0]
    plot(t, real(x(t)), label="$\mathrm{Re}(x(t))$")
    plot(t, imag(x(t)), label="$\mathrm{Im}(x(t))$")
    xlabel("$t$")
    legend(); grid()

--------------------------------------------------------------------------------

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    #pp.gcf().subplots_adjust(bottom=0.25, top=0.75, left=0.1, right=0.9, 
    #                         hspace=0.75)
    tight_layout()
    save("images/scalar-LTI-alt")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

![](images/scalar-LTI-alt.svg)

--------------------------------------------------------------------------------

    fig = figure()
    ax = fig.add_subplot(111, projection="3d")
    zticks = ax.set_zticks
    xt = squeeze(x(t))
    ax.plot(t, real(xt), imag(xt))
    xticks([0.0, 20.0]); yticks([]); zticks([])
    ax.set_xlabel("$t$")
    ax.set_ylabel("$\mathrm{Re}(x(t))$")
    ax.set_zlabel("$\mathrm{Im}(x(t))$")

::: hidden :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    tight_layout()
    save("images/scalar-LTI-3d")

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

--------------------------------------------------------------------------------

![](images/scalar-LTI-3d.svg)

--------------------------------------------------------------------------------


Principles: start with scalar, spent some real time on this.

Then diagonal/vectorial (or more general,
decoupling), then Jordan block (oops, complex, difficult to motivate)?
Start with the diagonalisable first (easier to explain), then general 
case.

--------------------------------------------------------------------------------

Explain change of variable stuff, exponential of Jordan block, etc.

**TODO:** code for that. Example with rooms & heat ? Can we display
graphically the modes ?

Reminder eigenvalue (and vector), etc.


Stability Criteria
--------------------------------------------------------------------------------

$\dot{x} = A x$ is asymptotically stable iff   
all eigenvalues of $A$ have a negative real part


--------------------------------------------------------------------------------

TODO: deal with eigenvectors too. Need to understand the "modes" associated
to each eigenvalue/vectors, time constant, oscillatory dynamics, etc.


Laplace & I/O Stability
================================================================================

--------------------------------------------------------------------------------

TODO. New document or not? What to put in this section?



<style>

.reveal section img {
  border:0;
  height:50vh;
  width:auto;

}

.reveal section img.medium {
  border:0;
  max-width:50vh;
}

.reveal section img.icon {
  display:inline;
  border:0;
  width:1em;
  margin:0em;
  box-shadow:none;
  vertical-align:-10%;
}

.reveal code {
  font-family: Inconsolata, monospace;
}

.reveal pre code {
  font-size: 1.5em;
  line-height: 1.5em;
  /* max-height: 80wh; won't work, overriden */
}

input {
  font-family: "Source Sans Pro", Helvetica, sans-serif;
  font-size: 42px;
  line-height: 54.6px;
}

</style>

<link href="https://fonts.googleapis.com/css?family=Inconsolata:400,700" rel="stylesheet"> 

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css" rel="stylesheet">
